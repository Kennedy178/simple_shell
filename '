/**
 * change_dir - changes the current working directory of the process
 * @args: Pointer to an array of arguments passed to the function.
 * @env: Pointer to the environment variables.
 *
 * Return: Always 0
 */
int change_dir(char **args, char **env)
{
    char *cwd, *dir, buffer[1024];
    int ret;

    cwd = getcwd(buffer, 1024);
    if (!cwd)
        fprintf(stderr, "getcwd() failed: %s\n", strerror(errno));
    if (!args[1])
    {
        dir = get_env_var(env, "HOME=");
        if (!dir)
            ret = /* TODO: what should this be? */
                chdir((dir = get_env_var(env, "PWD=")) ? dir : "/");
        else
            ret = chdir(dir);
    }
    else if (strcmp(args[1], "-") == 0)
    {
        if (!get_env_var(env, "OLDPWD="))
        {
            printf("%s\n", cwd);
            return (1);
        }
        printf("%s\n", get_env_var(env, "OLDPWD="));
        ret = /* TODO: what should this be? */
            chdir((dir = get_env_var(env, "OLDPWD=")) ? dir : "/");
    }
    else
        ret = chdir(args[1]);
    if (ret == -1)
    {
        fprintf(stderr, "cd: %s: %s\n", args[1], strerror(errno));
    }
    else
    {
        set_env_var(env, "OLDPWD", get_env_var(env, "PWD="));
        set_env_var(env, "PWD", getcwd(buffer, 1024));
    }
    return (0);
}

/**
 * get_env_var - gets the value of an environment variable.
 * @env: Pointer to the environment variables.
 * @var: The name of the variable to get.
 *
 * Return: The value of the variable, or NULL if not found.
 */
char *get_env_var(char **env, char *var)
{
    char *val, **p;

    val = NULL;
    for (p = env; *p; p++)
    {
        if (strncmp(*p, var, strlen(var)) == 0)
        {
            val = *p + strlen(var);
            break;
        }
    }
    return (val);
}

/**
 * set_env_var - sets the value of an environment variable.
 * @env: Pointer to the environment variables.
 * @var: The name of the variable to set.
 * @val: The value to set the variable to.
 *
 * Return: Always 0
 */
int set_env_var(char **env, char *var, char *val)
{
    char *p, **old_env;
    size_t len;

    old_env = env;
    for (; *env; env++)
    {
        if (strncmp(*env, var, strlen(var)) == 0)
        {
            len = strlen(var) + strlen(val) + 1;
            if ((p = malloc(len)) == NULL) {
                fprintf(stderr, "Error: failed to allocate memory for set_env_var()\n");
                return (-1);
            }
            snprintf(p, len, "%s%s", var, val);
            free(*env);
            *env = p;
            return (0);
        }
    }
    len = strlen(var) + strlen(val) + 2;
    if ((p = malloc(len)) == NULL) {
        fprintf(stderr, "Error: failed to allocate memory for set_env_var()\n");
        return (-1);
    }
    snprintf(p, len, "%s%s", var, val);
    *env++ = p;
    *env = NULL;
    return (0);
}

